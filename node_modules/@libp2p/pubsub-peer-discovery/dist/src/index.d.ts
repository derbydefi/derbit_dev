import { EventEmitter } from '@libp2p/interface/events';
import { peerDiscovery } from '@libp2p/interface/peer-discovery';
import type { PeerDiscovery, PeerDiscoveryEvents } from '@libp2p/interface/peer-discovery';
import type { PeerId } from '@libp2p/interface/peer-id';
import type { Message, PubSub } from '@libp2p/interface/pubsub';
import type { Startable } from '@libp2p/interface/startable';
import type { AddressManager } from '@libp2p/interface-internal/address-manager';
export declare const TOPIC = "_peer-discovery._p2p._pubsub";
export interface PubsubPeerDiscoveryInit {
    /**
     * How often (ms) we should broadcast our infos
     */
    interval?: number;
    /**
     * What topics to subscribe to. If set, the default will NOT be used.
     */
    topics?: string[];
    /**
     * If true, we will not broadcast our peer data
     */
    listenOnly?: boolean;
}
export interface PubSubPeerDiscoveryComponents {
    peerId: PeerId;
    pubsub?: PubSub;
    addressManager: AddressManager;
}
/**
 * A Peer Discovery Service that leverages libp2p Pubsub to find peers.
 */
export declare class PubSubPeerDiscovery extends EventEmitter<PeerDiscoveryEvents> implements PeerDiscovery, Startable {
    readonly [peerDiscovery] = true;
    readonly [Symbol.toStringTag] = "@libp2p/pubsub-peer-discovery";
    private readonly interval;
    private readonly listenOnly;
    private readonly topics;
    private intervalId?;
    private readonly components;
    constructor(components: PubSubPeerDiscoveryComponents, init?: PubsubPeerDiscoveryInit);
    isStarted(): boolean;
    start(): void;
    /**
     * Subscribes to the discovery topic on `libp2p.pubsub` and performs a broadcast
     * immediately, and every `this.interval`
     */
    afterStart(): void;
    beforeStop(): void;
    /**
     * Unsubscribes from the discovery topic
     */
    stop(): void;
    /**
     * Performs a broadcast via Pubsub publish
     */
    _broadcast(): void;
    /**
     * Handles incoming pubsub messages for our discovery topic
     */
    _onMessage(event: CustomEvent<Message>): void;
}
export declare function pubsubPeerDiscovery(init?: PubsubPeerDiscoveryInit): (components: PubSubPeerDiscoveryComponents) => PeerDiscovery;
//# sourceMappingURL=index.d.ts.map