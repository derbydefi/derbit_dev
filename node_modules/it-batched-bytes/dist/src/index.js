import defer from 'p-defer';
import { Uint8ArrayList } from 'uint8arraylist';
function isAsyncIterable(thing) {
    return thing[Symbol.asyncIterator] != null;
}
const DEFAULT_BATCH_SIZE = 1024 * 1024;
const DEFAULT_SERIALIZE = (buf, list) => { list.append(buf); };
function batchedBytes(source, options) {
    if (isAsyncIterable(source)) {
        return (async function* () {
            let buffer = new Uint8ArrayList();
            let ended = false;
            let deferred = defer();
            let size = Number(options?.size ?? DEFAULT_BATCH_SIZE);
            if (isNaN(size) || size === 0 || size < 0) {
                size = DEFAULT_BATCH_SIZE;
            }
            if (size !== Math.round(size)) {
                throw new Error('Batch size must be an integer');
            }
            const yieldAfter = options?.yieldAfter ?? 0;
            const serialize = options?.serialize ?? DEFAULT_SERIALIZE;
            void Promise.resolve().then(async () => {
                try {
                    let timeout;
                    for await (const buf of source) {
                        // @ts-expect-error - if buf is not `Uint8Array | Uint8ArrayList` we cannot use the default serializer
                        serialize(buf, buffer);
                        if (buffer.byteLength >= size) {
                            clearTimeout(timeout);
                            deferred.resolve();
                            continue;
                        }
                        timeout = setTimeout(() => {
                            deferred.resolve();
                        }, yieldAfter);
                    }
                    clearTimeout(timeout);
                    deferred.resolve();
                }
                catch (err) {
                    deferred.reject(err);
                }
                finally {
                    ended = true;
                }
            });
            while (!ended) { // eslint-disable-line no-unmodified-loop-condition
                await deferred.promise;
                deferred = defer();
                if (buffer.byteLength > 0) {
                    const b = buffer;
                    buffer = new Uint8ArrayList();
                    yield b.subarray();
                }
            }
        })();
    }
    return (function* () {
        const buffer = new Uint8ArrayList();
        let size = Number(options?.size ?? DEFAULT_BATCH_SIZE);
        if (isNaN(size) || size === 0 || size < 0) {
            size = DEFAULT_BATCH_SIZE;
        }
        if (size !== Math.round(size)) {
            throw new Error('Batch size must be an integer');
        }
        const serialize = options?.serialize ?? DEFAULT_SERIALIZE;
        for (const buf of source) {
            // @ts-expect-error - if buf is not `Uint8Array | Uint8ArrayList` we cannot use the default serializer
            serialize(buf, buffer);
            if (buffer.byteLength >= size) {
                yield buffer.subarray(0, size);
                buffer.consume(size);
            }
        }
        if (buffer.byteLength > 0) {
            yield buffer.subarray();
        }
    })();
}
export default batchedBytes;
//# sourceMappingURL=index.js.map